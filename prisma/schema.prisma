datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model Customer {
  id               Int       @id @default(autoincrement()) @map("CustomerId")
  name             String
  phone            String
  registrationDate DateTime
  addresses        Address[]
  sales            Sale[]

  @@map("Customer")
}

model Purchase {
  id          Int               @id @default(autoincrement()) @map("PurchaseId")
  employeeId  Int
  supplierId  Int
  date        DateTime
  amount      Float
  description String
  employee    Employee          @relation(fields: [employeeId], references: [id])
  supplier    Supplier          @relation(fields: [supplierId], references: [id])
  products    PurchaseProduct[]

  @@map("Purchase")
}

model PurchaseProduct {
  purchaseId Int
  productId  Int
  quantity   Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([purchaseId, productId])
  @@map("PurchaseProduct")
}

model Address {
  id         Int        @id @default(autoincrement()) @map("AddressId")
  customerId Int
  street1    String
  street2    String?
  postalCode String
  state      String
  city       String
  details    String?
  customer   Customer   @relation(fields: [customerId], references: [id])
  shipments  Shipment[]

  @@map("Address")
}

model Supplier {
  id        Int        @id @default(autoincrement()) @map("SupplierId")
  name      String
  purchases Purchase[]

  @@map("Supplier")
}

model Employee {
  id        Int        @id @default(autoincrement()) @map("EmployeeId")
  name      String
  position  String
  purchases Purchase[]

  @@map("Employee")
}

model Shipment {
  id                      Int                      @id @default(autoincrement()) @map("ShipmentId")
  saleId                  Int
  deliveryPersonId        Int
  addressId               Int
  status                  Int
  startDate               DateTime
  lastUpdateDate          DateTime
  sale                    Sale                     @relation(fields: [saleId], references: [id])
  deliveryPerson          DeliveryPerson           @relation(fields: [deliveryPersonId], references: [id])
  address                 Address                  @relation(fields: [addressId], references: [id])
  shipmentStatus          ShipmentStatus           @relation(fields: [status], references: [id])
  deliveryPersonShipments DeliveryPersonShipment[]

  @@map("Shipment")
}

model ShipmentStatus {
  id                      Int                      @id @map("StatusId")
  statusDescription       String
  shipments               Shipment[]
  deliveryPersonShipments DeliveryPersonShipment[]

  @@map("ShipmentStatus")
}

model SaleStatus {
  id                Int    @id @map("StatusId")
  statusDescription String
  sales             Sale[]

  @@map("SaleStatus")
}

model Product {
  id        Int               @id @default(autoincrement()) @map("ProductId")
  name      String
  quantity  Int
  measure   Float
  brand     String
  price     Float
  purchases PurchaseProduct[]
  sales     ProductSale[]

  @@map("Product")
}

model ProductSale {
  saleId    Int
  productId Int
  quantity  Int
  sale      Sale    @relation(fields: [saleId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([saleId, productId])
  @@map("ProductSale")
}

model DeliveryPerson {
  id              Int                      @id @default(autoincrement()) @map("DeliveryPersonId")
  name            String
  phone           String
  shipments       DeliveryPersonShipment[]
  directShipments Shipment[]

  @@map("DeliveryPerson")
}

model DeliveryPersonShipment {
  deliveryPersonId Int
  shipmentId       Int
  status           Int
  deliveryPerson   DeliveryPerson @relation(fields: [deliveryPersonId], references: [id])
  shipment         Shipment       @relation(fields: [shipmentId], references: [id])
  shipmentStatus   ShipmentStatus @relation(fields: [status], references: [id])

  @@id([deliveryPersonId, shipmentId])
  @@map("DeliveryPersonShipment")
}

model Sale {
  id             Int           @id @default(autoincrement()) @map("SaleId")
  customerId     Int
  status         Int
  startDate      DateTime
  lastUpdateDate DateTime
  customer       Customer      @relation(fields: [customerId], references: [id])
  saleStatus     SaleStatus    @relation(fields: [status], references: [id])
  products       ProductSale[]
  shipments      Shipment[]

  @@map("Sale")
}

enum EntityType {
  Permission
  Role
}

model Entity {
  id          Int          @id @default(autoincrement())
  name        String
  type        EntityType
  entityUser  EntityUser[]
  permissions Entity[]     @relation("PermissionRole")
  roles       Entity[]     @relation("PermissionRole")

  @@map("Entity")
}

model EntityUser {
  userId   Int
  entityId Int
  user     User   @relation(fields: [userId], references: [id])
  entity   Entity @relation(fields: [entityId], references: [id])

  @@id([userId, entityId])
  @@map("EntityUser")
}

model User {
  id          Int          @id @default(autoincrement()) @map("UserId")
  name        String       @db.VarChar(256)
  email       String       @db.VarChar(100)
  password    String       @db.VarChar(256)
  enabled     Boolean
  sessions    Session[]
  permissions EntityUser[]

  @@map("User")
}

model Session {
  id        String   @id() @default(uuid()) @db.Uuid
  ip        String
  userAgent String
  active    Boolean
  createdAt DateTime
  expiresAt DateTime
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("Session")
}
