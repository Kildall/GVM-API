generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id               Int       @id @default(autoincrement()) @map("CustomerId")
  name             String
  phone            String
  registrationDate DateTime
  enabled          Boolean   @default(true)
  addresses        Address[]
  sales            Sale[]    @relation(name: "SaleCustomer")

  @@map("Customer")
}

model Purchase {
  id          Int               @id @default(autoincrement()) @map("PurchaseId")
  employeeId  Int
  supplierId  Int
  date        DateTime
  amount      Float
  description String
  employee    Employee          @relation(fields: [employeeId], references: [id])
  supplier    Supplier          @relation(fields: [supplierId], references: [id])
  products    PurchaseProduct[] @relation("PurchaseToProduct")

  @@map("Purchase")
}

model PurchaseProduct {
  purchaseId Int
  productId  Int
  quantity   Int
  purchase   Purchase @relation("PurchaseToProduct", fields: [purchaseId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@id([purchaseId, productId])
  @@map("PurchaseProduct")
}

model Address {
  id         Int        @id @default(autoincrement()) @map("AddressId")
  name       String
  customerId Int
  street1    String
  street2    String?
  postalCode String
  state      String
  city       String
  details    String?
  enabled    Boolean    @default(true)
  customer   Customer   @relation(fields: [customerId], references: [id])
  deliveries Delivery[]

  @@map("Address")
}

model Supplier {
  id        Int        @id @default(autoincrement()) @map("SupplierId")
  name      String
  enabled   Boolean    @default(true)
  purchases Purchase[]

  @@map("Supplier")
}

model Employee {
  id               Int                @id @default(autoincrement()) @map("EmployeeId")
  name             String             @db.VarChar(256)
  position         String
  enabled          Boolean            @default(true)
  purchases        Purchase[]
  sales            Sale[]             @relation(name: "SaleEmployee")
  deliveries       Delivery[]         @relation(name: "EmployeeDelivery")
  employeeDelivery EmployeeDelivery[]

  user   User? @relation(name: "EmployeeUser")
  userId Int?  @unique

  @@map("Employee")
}

model Delivery {
  id               Int                @id @default(autoincrement()) @map("DeliveryId")
  saleId           Int
  employeeId       Int?
  addressId        Int
  startDate        DateTime
  lastUpdateDate   DateTime
  sale             Sale               @relation(name: "SaleDelivery", fields: [saleId], references: [id])
  employee         Employee?          @relation(name: "EmployeeDelivery", fields: [employeeId], references: [id])
  address          Address            @relation(fields: [addressId], references: [id])
  status           DeliveryStatusEnum
  businessStatus   BusinessStatusEnum
  driverStatus     DriverStatusEnum?
  employeeDelivery EmployeeDelivery?

  @@map("Delivery")
}

enum DeliveryStatusEnum {
  PENDING_ASSIGNMENT
  ASSIGNED
  IN_PROGRESS
  DELIVERED
  CANCELED
  DISPUTED
}

enum BusinessStatusEnum {
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum DriverStatusEnum {
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum SaleStatusEnum {
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Product {
  id        Int               @id @default(autoincrement()) @map("ProductId")
  name      String
  quantity  Int               @default(0)
  measure   Float
  brand     String
  price     Float
  enabled   Boolean           @default(true)
  purchases PurchaseProduct[]
  sales     ProductSale[]

  @@map("Product")
}

model ProductSale {
  saleId    Int
  productId Int
  quantity  Int
  sale      Sale    @relation(name: "Sale_ProductSale", fields: [saleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([saleId, productId])
  @@map("ProductSale")
}

model EmployeeDelivery {
  employeeId Int
  deliveryId Int                @unique
  status     DeliveryStatusEnum
  employee   Employee           @relation(fields: [employeeId], references: [id])
  delivery   Delivery           @relation(fields: [deliveryId], references: [id])

  @@id([employeeId, deliveryId])
  @@map("EmployeeDelivery")
}

model Sale {
  id             Int            @id @default(autoincrement()) @map("SaleId")
  customerId     Int
  employeeId     Int
  startDate      DateTime
  lastUpdateDate DateTime
  customer       Customer       @relation(name: "SaleCustomer", fields: [customerId], references: [id])
  employee       Employee       @relation(name: "SaleEmployee", fields: [employeeId], references: [id])
  status         SaleStatusEnum
  products       ProductSale[]  @relation(name: "Sale_ProductSale")
  deliveries     Delivery[]     @relation(name: "SaleDelivery")

  @@map("Sale")
}

enum EntityType {
  Permission
  Role
}

model Entity {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  type        EntityType
  users       User[]     @relation("EntityUser")
  permissions Entity[]   @relation("PermissionRole")
  roles       Entity[]   @relation("PermissionRole")

  @@map("Entity")
}

model User {
  id          Int         @id @default(autoincrement()) @map("UserId")
  email       String      @unique @db.VarChar(100)
  password    String      @db.VarChar(256)
  enabled     Boolean     @default(true)
  verified    Boolean     @default(false)
  sessions    Session[]
  permissions Entity[]    @relation("EntityUser")
  signatures  Signature[]
  audits      Audit[]

  employee   Employee? @relation(name: "EmployeeUser", fields: [employeeId], references: [id])
  employeeId Int?      @unique

  @@map("User")
}

model Session {
  id        String   @id() @default(uuid()) @db.Uuid
  ip        String
  userAgent String
  active    Boolean
  createdAt DateTime
  expiresAt DateTime
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("Session")
}

enum AccountAction {
  ACTIVATE
}

model Signature {
  id        String        @id() @default(uuid()) @db.Uuid
  action    AccountAction
  userAgent String?
  ip        String?
  createdAt DateTime
  expiresAt DateTime
  User      User          @relation(fields: [userId], references: [id])
  userId    Int
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

model Audit {
  id          Int         @id @default(autoincrement())
  timestamp   DateTime    @default(now())
  action      AuditAction
  entityType  String // The name of the model being audited
  userId      Int // The ID of the user who performed the action
  user        User        @relation(fields: [userId], references: [id])
  data        Json? // Store the data from the action
  description String? // Optional description of the action

  @@map("Audit")
}
